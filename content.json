[{"title":"搭建hexo主题博客","date":"2017-01-16T05:56:33.000Z","path":"2017/01/16/搭建hexo主题博客/","text":"[toc] 简要相关说明 Github Pages 实现静态网页部署 Hexo主题美化博客 实现目标 博客生成 域名绑定 双线路 博客备份 准备工作 安装msysgit 安装Node.js 搭建 命令行操作均在Git Bash下进行 Hexo安装 Hexo12345$ # 更换 taobao的npm源npm install -g cnpm --registry=https://registry.npm.taobao.org$ # 安装 hexo$ npm install hexo-cli -g$ npm install hexo --save 初始化 Hexo12345$ # 新建 Hexo文件夹$ mkdir X:/yourfile/Hexo$ # 初始化$ hexo init$ npm install 安装 Hexo插件12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save 查看Hexo 本地效果12hexo generate || hexo ghexo server || hexo s 效果url：localhost:4000 博客部署Github Pages配置Github 注册Github账户（Sign Up） 创建项目仓库New repository 仓库名称必须为 username.github.io 初始化仓库 配置SSH密钥 实现本地代码库通过git操作与远端Github代码库同步 1[ -d ~/.ssh ] &amp;&amp; clip &lt; ~/.ssh/id_rsa.pub^C| ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 存在SSH密钥则将公钥的内容复制到系统粘贴板(clipboard)，否则创建密钥 创建密钥过程中，提示输密码直接回车 登录Github → Account Setting → SSH keys and GPG keys → Add SSH key 测试设置成功与否 1$ ssh -T git@github.com 用户信息设置12git config --global user.name &quot;XXXX&quot;$ git config --global user.email &quot;XXXX@gmail.com&quot; Hexo 更新到Github 仓库 配置项 _config.yml (X:\\yourfile\\Hexo) 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:xxxx/xxxx.github.io.git branch: master 执行命令进行部署 1hexo g -d xxxx.github.io 进行访问即可 扩展Hexo 相关更换主题 Hexo 官网主题 本博客使用的是 yilia 主题 安装 （X:\\yourfile\\Hexo\\themes 下） 1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 配置 12# 修改hexo根目录下的 _config.yml_config.yml ： theme: yilia 更新12cd themes/yiliagit pull Hexo 命令域名关联域名（简单粗暴） \\hexo\\source 文件夹下创建文件 CNAME 并提交 12echo www.xxxx.xxx &gt; CNAMEhexo g -d 添加记录 1CNAME WWW xxxx.github.io 注意:这个简单粗暴指的是操作简单，但是有些浏览器无法解析。比如谷歌和火狐能顺利打开网页，但是360浏览器表示有点方，一直404 关联域名 （DNSPOD） \\hexo\\source 文件夹下创建文件 CNAME 并提交 12echo xxxx.xxx &gt; CNAMEhexo g -d 修改域名提供商提供的DNS 12f1g1ns2.dnspod.net f1g1ns1.dnspod.net 使用DNSPOD 账户添加域名解析 12www A 默认 IP Address@ A 默认 IP Address Lucia’note 博客搭建在github与gitcafe上，域名解析哪个快走哪个 博客备份在git@osc 博客备份 删除文件夹内原有的.git缓存文件(以防造成仓库冲突) 1[ -d .git ] &amp;&amp; rm .git 编辑.gitignore(指定忽略文件） 123/.deploy_git #hexo默认的.git配置文件夹/public #根据source文件夹内容自动生成/_config.yml #配置文件含重要信息 初始化仓库并添加远程仓库 12git initgit remote add origin &lt;server&gt; 添加本地文件提交说明到仓库并同步到远端仓库 123git add . git commit -m &quot;first commit&quot; git push -u origin master 更新同步操作 123git add .git commit -m &apos;更新信息&apos;git push 拉取备份文件 123456git initgit remote add origin &lt;server&gt; git fetch --allgit reset --hard origin/master# 更新后拉取git pull 博客搭建成功—致谢以下道友的辛苦探路 https://my.oschina.net/ryaneLee/blog/638440https://segmentfault.com/a/1190000003710980https://segmentfault.com/a/1190000003710962https://segmentfault.com/a/1190000003710962","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"mysql5.6.zip 安装","date":"2016-12-05T12:52:31.000Z","path":"2016/12/05/mysql/","text":"[TOC] 准备工作 mysql5.6 下载地址 http://dev.mysql.com/downloads/mysql/5.6.html 安装过程解压缩重命名 解压缩在C盘某个文件夹下并重命名为MySQL SERVER 5.6(便于记忆) mysql-5.6.34-winx64 → MySQL SERVER 5.6(或mysql56) 设置环境变量 此电脑→高级系统设置→高级→环境变量→PATH→编辑→编辑文本追加 ;C:\\Program Files (x86)\\MySQL\\MySQL Server 5.6\\bin\\; 修改配置文件 配置文件：MySQL Server 5.6\\my-default.ini 添加配置如代码框中所示12345678910111213141516171819202122232425262728293031323334353637# For advice on how to change settings please see# http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html# *** DO NOT EDIT THIS FILE. It&apos;s a template which will be copied to the# *** default location during install, and will be replaced if you# *** upgrade to a newer version of MySQL.[mysqld]# Remove leading # and set to the amount of RAM for the most important data# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.# innodb_buffer_pool_size = 128M# Remove leading # to turn on a very important data integrity option: logging# changes to the binary log between backups.# log_bin# These are commonly set, remove the # and set as required.# basedir = .....# datadir = .....# port = .....# server_id = .....#--- 添加配置如下 ---## mysql所在目录basedir = C:\\Program Files (x86)\\MySQL\\MySQL Server 5.6# mysql所在目录\\datadatadir = C:\\Program Files (x86)\\MySQL\\MySQL Server 5.6\\data# Remove leading # to set options mainly useful for reporting servers.# The server defaults are faster for transactions and fast SELECTs.# Adjust sizes as needed, experiment to find the optimal values.# join_buffer_size = 128M# sort_buffer_size = 2M# read_rnd_buffer_size = 2M sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 以管理员身份运行cmd（否则会因权限不够报错 Install/Remove of the Service Denied!） 123C:\\Users\\lucia\\Desktop&gt;cd C:\\Program Files (x86)\\MySQL\\MySQL Server 5.6\\bin\\C:\\Program Files (x86)\\MySQL\\MySQL Server 5.6\\bin&gt;mysql -install 必须进入bin文件夹，否则启动服务会报错 发生系统错误 2","tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"},{"name":"windows10","slug":"windows10","permalink":"http://yoursite.com/tags/windows10/"}]},{"title":"git","date":"2016-12-03T07:25:14.000Z","path":"2016/12/03/git/","text":"","tags":[]},{"title":"Linux源代码安装Git及其他附录","date":"2016-11-24T02:01:08.000Z","path":"2016/11/24/sourcecodeGIT/","text":"[TOC] 环境说明： OS：CentOS-6.5.mininal (NULL) GIT：git version 2.8.2 NULL特指什么软件都未安装（纯净版）1[2] OS 新建了一个用户 xiaolu 准备工作：安装 EPEL源根据CentOS的版本下载不同的镜像 ( 使用的是国内的EPEL源-科大源）12345678[root@lucia ~]# su xiaolu[xiaolu@lucia root]$ cd /etc/yum.repos.d/[xiaolu@lucia yum.repos.d]$ sudo yum -y install wget[xiaolu@lucia yum.repos.d]$ sudo mv CentOS-Base.repo CentOS-Base.repo.bak[xiaolu@lucia yum.repos.d]$ sudo wget -O CentOS-Base.repo https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=2 # wget -O --output-document=FILE 指定下载目录和文件名[xiaolu@lucia yum.repos.d]$ yum makecache#附-科大源：https://lug.ustc.edu.cn/wiki/mirrors/help/centos 时间校准123456789[xiaolu@lucia yum.repos.d]$ cd /tmp[xiaolu@lucia tmp]$ sudo yum -y install ntpdate.x86_64[xiaolu@lucia tmp]$ sudo ntpdate 0.pool.ntp.org 1 Apr 16:40:49 ntpdate[7329]: no server suitable for synchronization found---------------------------------------------------------------------------------[xiaolu@lucia tmp]$ sudo yum -y install rdate.x86_64[xiaolu@lucia tmp]$ sudo rdate -s time.nist.gov[xiaolu@lucia tmp]$ dateSun May 1 23:17:19 CST 2016 注：ntpdate校准报错选择rdate（很可能是防火墙封锁了udp的123端口, 如果关闭的防火墙问题依旧, 很可能是上层路由的设置有问题, 如果这种情况, 我们就只能通过tcp来更新时间） 安装Git（ 源代码安装）Step 1: 安装所需的依赖包源代码编译GIT之前，确保系统安装了所需的包或者通过以下命令来安装它12[xiaolu@lucia tmp]$ sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-ExtUtils-MakeMaker package -y[xiaolu@lucia tmp]$ sudo yum -y install gcc (下载 编译器 ) Step 2：下载并编译GIT源代码 ‍‍从 git-scm 下载最新Git源代码或者简单的使用以下载命令下载Git 2.8.212345678[xiaolu@lucia tmp]$ sudo wget -c https://www.kernel.org/pub/software/scm/git/git-2.8.2.tar.gz[xiaolu@lucia tmp]$ tar -zxvf git-2.8.2.tar.gz [xiaolu@lucia tmp]$ cd git-2.8.2[xiaolu@lucia git-2.8.2]$ make prefix=/usr/local/git all[xiaolu@lucia git-2.8.2]$ sudo make prefix=/usr/local/git install[xiaolu@lucia git-2.8.2]$ su root[root@lucia git-2.8.2]# echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc # 设置环境变量[root@lucia git-2.8.2]# source /etc/bashrc Step 3：核实GIT 版本完成以上步骤后，使用以下命令检查GIT版本12[xiaolu@lucia git-2.8.2]$ git --versiongit version 2.8.2 Step 4：命令补全Linux的shell环境通过bash-completion软件包提供命令补齐功能，在录入命令参数时按一次或两次TAB键可实现参数的自动补齐或提示12345678910111213141516171819[xiaolu@lucia git-2.8.2]$ sudo cp contrib/completion/git-completion.bash /etc/bash_completion.d/ #将Git源码包中的命令补全脚本肤质到bash-completion对应的目录中 [xiaolu@lucia git-2.8.2]$ . /etc/bash_completion.d/git-completion.bash #重新加载自动补齐脚本，使之在当前的shell中生效``` 为了能够在终端开启时自动加载脚本，需要修改/etc/profile文件和~/.bashrc文件```shell[root@lucia git-2.8.2]# sudo cat &gt;&gt; ~/.bashrc &lt;&lt;EOF&gt; if [ -f /etc/bash_completion.d/git-completion.bash ]; then&gt; . /etc/bash_completion.d/git-completion.bash&gt; fi&gt; EOF[xiaolu@lucia git-2.8.2]$ su root[root@lucia git-2.8.2]# sudo cat &gt;&gt; /etc/profile &lt;&lt;EOF&gt; if [ -f /etc/bash_completion.d/git-completion.bash ]; then&gt; . /etc/bash_completion.d/git-completion.bash&gt; fi&gt; EOF 附1：中文支持 相关说明：GIT可以在提交说明中使用中文，但是需要对Git进行配置但对于用中文来命名文件、目录和引用，前提是使用UTF-8 字符集的环境下‍ UTF8字符集：1、在提交时，可以在提交说明中输入中文2、显示提交历史，能够正常显示提交说明中的中文字符3、可以添加名称为中文的文件，并可以在同样使用UTF-8字符集的Linux环境中克隆和检出4、可以创建带有中文字符的里程碑名称 ❀ 在默认设置下，中文文件名在工作区状态输出、查看历史更改概要，以及在补丁文件中，文件名中的中文不能正确的显示，而是显示为八进制的字符编码，如下 1234[xiaolu@lucia rs-project]$ git status -s?? &quot;\\346\\265\\213\\350\\257\\225.txt&quot;[xiaolu@lucia rs-project]$ printf &quot;\\346\\265\\213\\350\\257\\225.txt\\n&quot;测试.txt ❀ 解决方法：通过将Git配置变量 core.quotepath 设置为 false 123[xiaolu@lucia rs-project]$ git config --global core.quotepath false[xiaolu@lucia rs-project]$ [xiaolu@lucia rs-project]$ git status -s?? 测试.txt 附2：相关问题make prefix=/usr/local/git all 报错目前我碰到的报错有两种： 时间没有校准（看见 in the future 就是时间没有校准，校准后重新make） 123456789101112ake[1]: Warning: File `Makefile&apos; has modification time 2.5e+06 s in the future/usr/bin/perl Makefile.PL PREFIX=&apos;/usr/local&apos; INSTALL_BASE=&apos;&apos; --localedir=&apos;/usr/local/share/locale&apos;Writing perl.mak for Gitmake[1]: warning: Clock skew detected. Your build may be incomplete. GEN git-add--interactivemake[1]: Warning: File `Makefile&apos; has modification time 2.5e+06 s in the futureWriting perl.mak for Gitmake[2]: Warning: File `Makefile.PL&apos; has modification time 2.5e+06 s in the futureWriting perl.mak for Gitmake[2]: *** [perl.mak] Error 1make[1]: *** [instlibdir] Error 2make: *** [git-add--interactive] Error 2 第二种报依赖包错误，导致make失败本文OS是纯净版，实际上真正OS环境下许多依赖包已经安装，且通过yum仓库安装的版本都较老，换yum源后将提示的相关依赖包卸载（rpm -e），然后重新yum安装一下","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"高性能集群软件-Keepalived","date":"2016-06-13T15:07:33.000Z","path":"2016/06/13/Keepalived/","text":"keepalived 介绍 keepalived 是 Linux下一个轻量级的高可用解决方案 keepalived 主要通过虚拟路由冗余（VRRP）来实现高可用功能 优点 部署及使用简单，只需一个配置文件即可完成 功能 服务器状态检测和故障隔离功能 HA（High Available） cluster &nbsp; [高可用群集] keepalived 发展 keepalived起初是为LVS（Linux Virtual System）设计，专门监控集群系统中各个服务节点的状态根据TCP/IP参考模型 第三、第四、第五层交换机制检测每个服务节点的状态（详细见本页keepalived工作原理） e.g: keepalived检测WEB服务器的状态如果一台WEB服务器死机/工作出现故障，keepalived检测到此状况后会将故障服务器从系统中剔除；直至该服务器工作正常后keepalived自动将该服务器加入到服务器群中； 以上工作keepalived自动完成，无需人工干涉，人工干预仅是修复出现故障的服务节点； keepalived 后续加入了VRRP功能VRRP（Virtaul Router Redunadancy Protocol，虚拟路由器冗余协议） 目的：解决静态路由出现的单点故障问题，实现网络不间断稳定运行 VRRP 协议与工作原理❉ 引入VRRP概念 说明：图片来源百度百科；左侧图片为局域网组网；右侧图片为VRRP组网 局域网组网 e.g : 网络内的所有主机会设置一条默认网关（10.100.10.1），当主机发出的目的地址不在本网段（10.100.10.0/24）的报文；通过默认网关发往路由器A，从而实现主机与外部网络的通信 该组网缺点：当路由器A坏掉时，本网段内通过以RA为默认网关下一跳的主机将断掉与外界的通信，产生单点故障 VRRP组网 e.g : RA：Master 活动路由器 —&gt;10.100.10.2RB：Backup 备份路由器 —&gt;10.100.10.3VRIP : 虚拟路由器IP —-&gt;10.100.10.1 VRRP将局域网中的一组路由器【 RA和RB】组成一个虚拟路由器——&gt;&gt;&gt;备份组 虚拟路由器拥有自己的IP地址 10.100.10.1局域网内的主机仅知道虚拟路由器IP地址为10.100.10.1，不知道具体的Master与Backup路由器IP局域网内的主机将默认网关下一跳的地址设置为该虚拟路由器IP地址，通过该地址与其他网络进行通信 该组网优点：当备份组内的Master路由器DOWN掉，会进行选举策略选出一个新的Master路由器，继续往网络内的主机提供路由服务，从而实现网络内的主机不间断地与外部网络进行通信 ❉ VRRP 协议 VRRP：解决局域网中配置静态网关出现单点失效的路由协议 设计目标：网络发生故障时透明地进行设备切换而不影响主机间的数据通信 ❉ VRRP 工作原理 VRRP协议将两台或多台路由器设备虚拟成一个虚拟路由器，对外提供虚拟路由器IP(一个或多个)； 而在路由器组内部，如果实际拥有这个对外IP的路由器如果工作正常的话就是MASTER，或者是通过算法选举产生；MASTER实现针对虚拟路由器IP的各种网络功能，如ARP请求，ICMP，以及数据的转发等； 其他设备不拥有该IP，状态是BACKUP，除了接收MASTER的VRRP状态通告信息外，不执行对外的网络功能。 当主机失效时，BACKUP将接管原先MASTER的网络功能。 ❀ 如何判定多个路由器在同一组虚拟路由器中？ VRID：每个虚拟路由器都有一个唯一标识（VRID是一个0～255的正整数）;配置VRRP协议时需要配置每个路由器的虚拟路由器ID(VRID)和优先权值;使用VRID将路由器进行分组，具有相同VRID值的路由器为同一个组 ❀ BACKUP 为什么没有发生抢占？ VRRP通告:它使用IP多播数据包进行封装，组地址为224.0.0.18，发布范围只限于同一局域网内;在一个虚拟路由器中，只有处于MASTER角色的路由器会一直发送VRRP通告信息；处于BACKUP状态的路由器只接收MASTER发过来的报文信息，用来监控MASTER运行状态; 除非它的优先级比MASTER更高 ❀ 什么时候发生选举？ 当MASTER不可用时，BACKUP无法收到MASTER发过来的报文信息；认定MASTER出现故障，然后多台BACKUP就开始进行选举； ❀ Master选举 虚拟路由器IP=路由器本身配置IP该路由器始终将是MASTER；IP地址所有者自动具有最高优先级：255 优先级选举主控路由器（优先级范围是0—255）优先级0一般用在IP地址所有者主动放弃主控者角色时使用。可配置的优先级范围为1—254 优先级相等，则比较路由器的实际IP，IP值较大的优先权高 ❉ VRRP 应用实例123456789101112131415161718192021222324252627282930 +-----------+ +-----------+ | Rtr1 | | Rtr2 | |(MR VRID=1)| |(BR VRID=1)| |(BR VRID=2)| |(MR VRID=2)| VRID=1 +-----------+ +-----------+ VRID=2 IP A ----------&gt;* *&lt;---------- IP B | | | | ------------------+------------+-----+--------+--------+--------+-- ^ ^ ^ ^ | | | | (IP A) (IP A) (IP B) (IP B) | | | | +--+--+ +--+--+ +--+--+ +--+--+ | H1 | | H2 | | H3 | | H4 | +-----+ +-----+ +--+--+ +--+--+ Legend: ---+---+---+-- = Ethernet, Token Ring, or FDDI H = Host computer MR = Master Router BR = Backup Router * = IP Address (IP) = default router for hosts----------------------------------------------------------------- + VRID 1 | Rtr1（Master） | Rtr2（Backup） + 正常情况下 H1与H2走R1;反之 走R2 + VRID 2 | Rtr1（Backup） | Rtr2 （Master） + 正常情况下 H3与H4走R2;反之 走R1 keepalived 安装 实验需求：安装keepalived（仅安装） 实验实现：服务器：CentOS 6.5-minimal软 件：Keepalived ( V_1.2.19 ) 安装过程：123456789101112# 下载安装包并解压，查看相关参数[root@lucia tmp]# wget http://www.keepalived.org/software/keepalived-1.2.19.tar.gz # 下载Keepalived安装包[root@lucia tmp]# tar -zxf keepalived-1.2.19.tar.gz #解压安装包[root@lucia tmp]# cd keepalived-1.2.19[root@lucia keepalived-1.2.19]# ./configure --help #查看confiure编译参数 #================================================# 指定安装在/etc/ &#123;--sysconfdir=/etc&#125;# 指定使用内核源码中的头文件 &#123;--with-kernel-dir&#125;# 注：使用LVS时，需要用到&quot;--with-kernel-dir&quot;#=============================================== 编译安装123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657[root@lucia keepalived-1.2.19]# [ -z /usr/src/kernels/ ] &amp;&amp; yum -y install kernel-headers kernel-devel || echo &quot;The kernel file already exists&quot;The kernel file already exists#===========================# 判断kernels目录是否存在文件#=========================== [root@lucia keepalived-1.2.19]# ./configure --sysconfdir=/etc/ --with-kernel-dir=/usr/src/kernels/2.6.32-573.12.1.el6.x86_64 #============================================================================# ./configure 对即将安装的软件进行配置，检查当前的环境是否满足要安装软件的依赖关系#============================================================================configure: error: in `/tmp/keepalived-1.2.19&apos;:configure: error: no acceptable C compiler found in $PATHSee `config.log&apos; for more details #============================================================================# 报错：gcc编译器没有安装# [root@lucia keepalived-1.2.19]# yum -y install gcc#============================================================================= 继续返回上一步预安装./configure[root@lucia keepalived-1.2.19]# ./configure --sysconfdir=/etc/ --with-kernel-dir=/usr/src/kernels/2.6.32-573.12.1.el6.x86_64 configure: error:!!! OpenSSL is not properly installed on your system. !!!!!! Can not include OpenSSL headers files. !!! #=========================================================================# 报错：OpenSSL 没有安装# [root@lucia keepalived-1.2.19]# yum -y install openssl*#=========================================================================./configure 成功后，显示是Keepalived 输出的加载模块信息Keepalived configuration------------------------Keepalived version : 1.2.19 Compiler : gccCompiler flags : -g -O2Extra Lib : -lssl -lcrypto -lcrypt Use IPVS Framework : YesIPVS sync daemon support : YesIPVS use libnl : Nofwmark socket support : YesUse VRRP Framework : YesUse VRRP VMAC : YesSNMP support : NoSHA1 support : NoUse Debug flags : No[root@lucia keepalived-1.2.19]# make &amp;&amp; make install #编译&amp;&amp;安装[root@lucia keepalived-1.2.19]# ln -s /usr/local/sbin/keepalived /sbin/ #软链接到系统使用的管理程序目录中[root@lucia keepalived-1.2.19]# chkconfig --add keepalived #添加到系统服务[root@lucia keepalived-1.2.19]# chkconfig --level 35 keepalived on #添加到开机启动 ❉ Keepalived 配置详解123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131[root@lucia keepalived-1.2.19]# cd /etc/keepalived/[root@lucia keepalived-1.2.19]# lskeepalived.conf samples# ================================================================# Keepalived 配置文件路径为/etc/keepalived/keepalived.conf# samples 目录下存放着keepalived配置的示例# ================================================================#============================================================# keepalived.conf 配置#------------------------------------------------------------# 1、Keepalived 配置文件以block形式组织，每个块内容都包含在&#123;&#125;# 2、“#” “!” 开头行为注释# 3、keepalived 配置为三类：# 全局配置:对整个keepalived都生效的配置 # VRRPD 配置:核心配置，主要实现keepalived高可用功能# LVS配置#============================================================! Configuration File for keepalived ######################### 全局配置######################## global_defs &#123; # global_defs 全局配置标识 ------------------------------------------ notification_email &#123; # notification_email用于设置报警邮件地址 acassen@firewall.loc # 可以设置多个，每行一个 failover@firewall.loc # 设置邮件报警，需开启本机Sendmail 服务 sysadmin@firewall.loc # yum -y install mailx sendmail &#125; ---------------------------------------------- notification_email_from Alexandre.Cassen@firewall.loc # 设置邮件发送地址 smtp_server 192.168.200.1 # 设置邮件的smtp server地址 smtp_connect_timeout 30 # 设置连接smtp sever超时时间 router_id LVS_DEVEL # 表示运行keepalived服务器标识，发邮件时显示在邮件主题中的信息&#125;####################### VRRPD配置######################vrrp_instance VI_1 &#123; # VRRPD 配置标识 VI_1是实例名称 state MASTER # 指定Keepalvied角色 MASTER表示此主机为主服务器 BACKUP则是表示为备用服务器 interface eth0 # 指定 HA 监测网络的接口 virtual_router_id 51 # 虚拟路由标识，标识为数字，同一个VRRP实例使用唯一的标识，即可表示在同一个vrrp_instance下 MASTER_ID = BACKUP_ID priority 100 # 定义节点优先级，数字越大表示节点的优先级越高，同一个VRRP_instance下，MASTE_PRIORITY &gt; BACKUP_PRIORITY advert_int 1 # 设定MASTER与BACKUP主机质检同步检查的时间间隔，单位为秒 authentication &#123; # 设定节点间通信验证类型和密码，验证类型主要有PASS和AH两种 auth_type PASS # 同一个vrrp_instance，MASTER验证密码和BACKUP保持一致 auth_pass 1111 &#125; virtual_ipaddress &#123; # 设置虚拟IP地址 (VIP),又叫做漂移IP地址 192.168.200.16 192.168.200.17 192.168.200.18 &#125;#-------------------------------------------------------------------------------# 问：为什么叫漂移IP地址？# 答：当Keepalived切换到MASTER状态时，IP地址会自动添加到系统中# 当Keepalvied切换到BACKUP状态时，IP地址将自动从系统中删除# # keepalived通过“ip address add”命令的形式将VIP添加到系统# 通过“ip add”查看系统中添加的VIP地址#--------------------------------------------------------------------------------&#125;####################### LVS配置######################virtual_server 192.168.200.100 443 &#123; # virtual_server LVS配置标识 # 格式：virtual_server VIP port [IP 和 port 之间空格隔开] delay_loop 6 # 设置健康检查时间间隔，单位为秒 lb_algo rr # 设置负载调度算法，可用的调度算法有：rr、wlc、lc、lblc、sh、dh等 lb_kind NAT # 设置LVS实现负载均衡的机制，有NAT、TUN和DR三种模式可选 nat_mask 255.255.255.0 # NAT子网掩码 persistence_timeout 50 # 会话保持时间 protocol TCP # 指定转发协议类型#----------------------------------------------------------------------------------------------------# persistence_timeout 会话保持时间对动态网页非常有用，为集群系统中的seesion共享提供了一个很好的解决方案# 用户的请求会一直分发到某个服务节点，直至超过这个会话的保持时间（指最大无响应超时时间）# =[用户操作动态页面如果在50s没有执行任何操作则被分发到另外的节点]#---------------------------------------------------------------------------------------------------- real_server 192.168.201.100 443 &#123; # 设置real server段开始的标识 [ IP为真实IP地址] # 格式：real_server realIP port [IP 和 port 之间空格隔开] ----------------------------------------------------------------- weight 1 # 用于配置real server节点的权值，权值大小用数字表示，数字越大，权值越高 # 设置权值大小可以为不同性能的服务器分配不同的负载 ------------------------------------------------------------------ SSL_GET &#123; # 健康检查 SSL_GET url &#123; # 指定SSL检查的URL信息，可以指定多个 path /index.html # 后跟详细的URL路径 digest ff20ad2481f97b1754ef3e12ecd3a9cc # SSL检查后的摘要信息，可以通过genhash命令工具获取#-----------------------------------------------------------------# [root@lucia keepalived]# genhash -s 192.168.201.100 -p 80 -u /index.html#----------------------------------------------------------------- &#125; url &#123; path /mrtg/ digest 9b3a0c85a887a256d6939da88aabd8cd &#125; connect_timeout 3 # 表示无响应超时时间，单位为秒 nb_get_retry 3 # 表示重试次数 delay_before_retry 3 # 表示充实间隔 &#125; &#125;&#125; virtual_server 10.10.10.2 1358 &#123; delay_loop 6 lb_algo rr lb_kind NAT persistence_timeout 50 protocol TCP sorry_server 192.168.200.200 1358 # 备份节点，在所有real serer失效后，启用备份节点&#125; VRRP原理参考文档如下： http://bbs.nanjimao.com/thread-790-1-1.html （此篇写的很好） http://blog.chinaunix.net/uid-26575352-id-3529109.html keepalived.conf 参考书籍 《高性能Linux服务器构建实战》","tags":[{"name":"keepalived","slug":"keepalived","permalink":"http://yoursite.com/tags/keepalived/"}]}]